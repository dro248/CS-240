package server.database;

import shared.model.User;
import java.sql.*;

public class UserDAO 
{
	
	Database database;
	
	public UserDAO(Database db)
	{
		database = db;
	}
	

	/**
	 * Adds a user to the database.
	 * @param newUser
	 * @return Returns whether or not user is successfully added to database.
	 */
	public boolean add(User newUser) throws DatabaseException
	{ 
		PreparedStatement stmt = null;
		ResultSet keyRS = null;		
		try 
		{
			String query = "INSERT INTO User (username, password, firstname, lastname, email, recordsIndexed, currentBatchID)"
							+ " values (?, ?, ?, ?, ?, ?, ?)";
			stmt = database.getConnection().prepareStatement(query);
			stmt.setString(1, newUser.getUsername());
			stmt.setString(2, newUser.getPassword());
			stmt.setString(3, newUser.getFirstname());
			stmt.setString(4, newUser.getLastname());
			stmt.setString(5, newUser.getEmail());
			stmt.setInt(5, newUser.getRecordsIndexed());
			stmt.setInt(5, newUser.getCurrentBatchID());
			
			/*
			if (stmt.executeUpdate() == 1) 
			{
				Statement keyStmt = database.getConnection().createStatement();
				keyRS = keyStmt.executeQuery("select last_insert_rowid()");
				keyRS.next();
				int id = keyRS.getInt(1);
				newUser.setId(id);
			}
			else 
			{
				throw new DatabaseException("Could not insert contact");
			}
			*/
		}
		catch (SQLException e) 
		{
			throw new DatabaseException("Could not insert contact", e);
		}
		finally 
		{
			Database.safeClose(stmt);
			Database.safeClose(keyRS);
		}

		
		return false; 
	}
	
	/**
	 * Check if username and password are contained in the database
	 * @param username
	 * @param password
	 * @return Returns user with specified username & password is returned.
	 */
	public User get(String _username, String _password)
	{
		PreparedStatement stmt = null;
		ResultSet rs = null;
		try 
		{
			String query = "SELECT * FROM User WHERE username = ? AND password = ?";
			stmt = database.getConnection().prepareStatement(query);
			stmt.setString(1, _username);
			stmt.setString(2, _password);

			rs = stmt.executeQuery();
			
			int id = rs.getInt(1);
			String username = rs.getString(2);
			String phone = rs.getString(3);
			String address = rs.getString(4);
			String email = rs.getString(5);
			String url = rs.getString(6);

			new User(id, username, password, firstname, lastname, email, indexedRecords, currentBatchID);
			
		}
		catch (SQLException e) 
		{
			DatabaseException serverEx = new DatabaseException(e.getMessage(), e);
			System.out.println("[server.database.UserDAO]: get() not working...");
			throw serverEx;
		}		
		finally 
		{
			Database.safeClose(rs);
			Database.safeClose(stmt);
		}

		logger.exiting("server.database.Contacts", "getAll");
		
		return result;	
		
	}
	
	/**
	 * Updates the specified user with updated fields.
	 * @param updateUser
	 */
	public void update(User updateUser) throws DatabaseException
	{
		PreparedStatement stmt = null;
		try
		{     
			String sql = "UPDATE User " 
						+ "SET password = ?, firstname = ?, lastname = ?, email = ?, recordsindexed = ?, currentbatch = ?"
						+ "WHERE  username = ?";
			
			stmt = database.getConnection().prepareStatement(sql);  
			stmt.setString(1, updateUser.getPassword());     
			stmt.setString(2, updateUser.getFirstname());
			stmt.setString(3, updateUser.getLastname());
			stmt.setString(4, updateUser.getEmail());
			stmt.setInt(5, updateUser.getRecordsIndexed());
			stmt.setInt(6, updateUser.getCurrentBatchID());
			stmt.setString(7, updateUser.getUsername());   

			if (stmt.executeUpdate() != 1) 
			{
				throw new DatabaseException("Could not update contact");
			}
		}
		catch (SQLException e) 
		{
			throw new DatabaseException("Could not update contact", e);
		}
		finally 
		{
			Database.safeClose(stmt);
		}
	}
}
